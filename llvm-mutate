#!/bin/bash
#
# llvm-mutate -[n|l|g|G] -[c|i|s instructions] -l -[o path]
#  mutate llvm IR
#
# Options
#  -C,--count ------ print the number of instructions
#  -L,--list ------- list instructions with number and types
#  -g,--cfg -------- graph the CFG
#  -G,--call-graph - graph the call graph
#  -c,--cut -------- cut the given instruction
#  -i,--insert ----- copy the second inst. before the first
#  -s,--swap ------- swap the given instructions
#  -l,--link ------- link the result into an executable
#  -o,--out -------- write output to specified file
#
HELP_TEXT=$(cat "$0" \
    |sed '/^[^#]/q' \
    |head -n -1 \
    |tail -n +3 \
    |sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' \
    |cut -c3-)
if echo "$1"|grep -q "\-h";then
    echo "$HELP_TEXT"; exit 1;
fi
if [ -z "$LLVM" ];then
    if [ -d "Debug+Asserts" ];then # prob. in the source directory
        LLVM="../../../Debug+Asserts"
    else # use opt to find it
        LLVM="$(dirname $(which opt))/.."
    fi
fi
OPT_FLAGS="-load ${LLVM}/lib/Mutate.so -f"
LINK=""
OUT=""
RAW=$(cat -)

run(){ RAW="$(echo "$RAW"|opt ${OPT_FLAGS} $@|llvm-dis)"; }
graph(){
    for graph in $(run $1 3>&1 >/dev/null 2>&3 \
        |sed "s/Writing '//;s/'...//");do
        if [ -f $graph ];then
            if which feh >/dev/null && which dot >/dev/null;then
                echo $graph
                cat $graph|dot -Tpng|feh - -.
            else
                cat $graph
            fi
            rm -f $graph
        fi
    done; }

## Process Options
eval set -- $(getopt \
    -o hCLgGc:i:s:lo:f: \
    -l help,count,cfg,call-graph,list,cut:,insert:,swap:,link,out:,file: \
    -- "$@" || echo "$HELP_TEXT" && exit 1;)
while [ $# -gt 0 ];do
    case $1 in
        -h|--help) echo "$HELP_TEXT" && exit 1;;
        -l|--link) LINK="yes";;
        -o|--out)  OUT="$2"; shift;;
        -f|--file) FILE="$2"; shift;;
        -C|--count) run -count ;;
        -L|--list)  run -list ;;
        -g|--cfg)   graph -dot-cfg ;;
        -G|--call-graph) graph -dot-callgraph ;;
        -c|--cut)   run -cut -inst1="$2"; shift;;
        -i|--insert)
            run -insert \
                -inst1="$(echo $2|cut -d, -f1)" \
                -inst2="$(echo $2|cut -d, -f2)"; shift;;
        -s|--swap)
            run -swap \
                -inst1="$(echo $2|cut -d, -f1)" \
                -inst2="$(echo $2|cut -d, -f2)"; shift;;
        (--) shift; break;;
        (-*) error "unrecognized option $1";;
        (*)  break;;
    esac
    shift
done

if [ ! -z "$LINK" ];then
    if [ -z "$OUT" ];then OUT=a.out; fi
    echo "$RAW"|llc|clang -x assembler - -o $OUT
else
    if [ -z "$OUT" ];then OUT=/dev/stdout; fi
    echo "$RAW" > $OUT
fi
