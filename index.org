# -*- org-export-html-postamble:nil; org-html-footnote-format:"<small>[%s]</small>" -*-
#+HTML_HEAD: <style>pre{background:#232323; color:#E6E1DC;} @media(min-width:800px){div#content{max-width:800px; padding:2em; margin:auto;}}</style>
#+Title: llvm-mutate -- mutate LLVM IR
#+Author: Eric Schulte
#+Options: toc:1 ^:nil

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:
LLVM Mutate is an LLVM compilers pass [fn:1].  Like all compiler
passes, it manipulates LLVM intermediate representation (IR), but
unlike most compiler passes it explicitly does *not* preserve
semantics.  Instead it provides a number of simple mutation operations
which may be specified through command line flags.  These operations
are more similar to genetic programming [fn:2] or mutation
testing [fn:3] operations than they are to traditional compiler
transformations.

Mutation Operations
| ids     | prints the total number of instructions                  |
| list    | lists each instruction with its type and its assigned id |
| name    | names each instruction (using LLVM's [[http://llvm.org/docs/doxygen/html/classllvm_1_1Value.html#a35ee267850af7c235474a8c46c7ac5af][Value.setName]])      |
| cut     | removes the numbered instruction from the program        |
| insert  | copies the second numbered instruction before the first  |
| replace | replace the first numbered instruction with the second   |
| swap    | swaps the two numbered instructions                      |

The =llvm-mutate= shell script wraps this compiler pass in a simple
interface which facilitates program manipulation.  See the [[#examples][examples]]
and the help output [fn:4]

To support application of these simple operations some surgery must be
performed on the data dependency graph to both (1) replace the use of
removed instructions, and to (2) fully incorporate added instructions.

#+ATTR_HTML: border="0" rules="none" frame="none"
| 1. Removed instruction.      | 2. Added instruction.      |
| file:removed-instruction.png | file:added-instruction.png |

* Installation
  :PROPERTIES:
  :CUSTOM_ID: instillation
  :END:

1. Copy or clone this repository [fn:5] to =llvm/lib/Transforms/Mutate= in
   your LLVM source tree,

2. Run =make= from within the Mutate directory.  See [fn:1] for more
   information on building LLVM compiler passes.

3. Place the =llvm-mutate= script in your path.  It may be necessary
   to set the =LLVM= environment variable to the base of your LLVM
   install so that the =llvm-mutate= script can load the =Mutate.so=
   shared library (Note: if you re-install LLVM after adding this
   repository to the Transforms directory setting the =LLVM=
   environment variable should not be necessary).

* Examples
  :PROPERTIES:
  :CUSTOM_ID: examples
  :END:

#+begin_src sh :exports results :results output :wrap html
cat README|sed -n '/^Examples/,/^License/p'|head -n -1|sed 's/^/ /'|markdown
#+end_src

* License
  :PROPERTIES:
  :CUSTOM_ID: license
  :END:

Licensed under the GPLV3, see the [[file:COPYING]] file in this directory
for more information.

* Footnotes
  :PROPERTIES:
  :exports:  both
  :END:

[fn:1] http://llvm.org/docs/WritingAnLLVMPass.html

[fn:2] http://www.gp-field-guide.org.uk/

[fn:3] [[http://scholar.google.com/scholar?as_q=&as_epq=An+analysis+and+survey+of+the+development+of+mutation+testing&as_oq=&as_eq=&as_occt=any&as_sauthors=Jia&as_publication=ieee&as_ylo=2011&as_yhi=2011&btnG=&hl=en&as_sdt=0%2C32][An analysis and survey of the development of mutation testing]]

[fn:4] Help information for the =llvm-mutate= script.
       #+begin_src sh :results output
         llvm-mutate --help
       #+end_src

       #+RESULTS:
       : llvm-mutate -[n|l|g|G] -[c|i|s instructions] -l -[o path]
       :  mutate llvm IR
       : 
       : Options
       :  -I,--ids -------- print the number of instructions
       :  -L,--list ------- list instructions with number and types
       :  -n,--name ------- name each instruction w/number
       :  -g,--cfg -------- graph the CFG
       :  -G,--call-graph - graph the call graph
       :  -c,--cut -------- cut the given instruction
       :  -r,--replace ---- replace the first inst. with the second
       :  -i,--insert ----- copy the second inst. before the first
       :  -s,--swap ------- swap the given instructions
       :  -l,--link ------- link the result into an executable
       :  -o,--out -------- write output to specified file

[fn:5] https://github.com/eschulte/llvm-mutate
